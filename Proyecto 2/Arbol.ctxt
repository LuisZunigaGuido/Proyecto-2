#BlueJ class context
comment0.target=Arbol
comment0.text=\r\n\ Write\ a\ description\ of\ class\ Arbol\ here.\r\n\ \r\n\ @author\ (your\ name)\ \r\n\ @version\ (a\ version\ number\ or\ a\ date)\r\n
comment1.params=
comment1.target=Arbol()
comment2.params=nodoRaiz
comment2.target=void\ setNodoRaiz(NodoArbol)
comment3.params=
comment3.target=NodoArbol\ getNodoRaiz()
comment4.params=nodoParam\ valorBuscado
comment4.target=NodoArbol\ buscarNodo(NodoArbol,\ int)
comment4.text=\ metodo\ buscarNodo\r\n\ \ \ busca\ nodos\ en\ el\ arbol\ y\ retorna\ el\ nodo\ buscado\r\n\ parametros\ de\ entrada\r\n\ \ \ toma\ como\ parametros\ un\ Nodo\ y\ un\ valor\ buscado,\ el\ nodo\ es\ para\ comparar\ el\ valor\ buscado\r\n\ parametros\ de\ salida\r\n\ \ \ retorna\ un\ nodoArbol\r\n\ respuesta\ esperada\r\n\ \ \ \ \ \ \ se\ espera\ que\ el\ metodo\ sea\ capaz\ de\ buscar\ nodos\ en\ el\ arbol\ y\ retornarlo\ correctamente\r\n
comment5.params=nodoParam\ valorParam
comment5.target=void\ ingresarNodoRecursivo(NodoArbol,\ int)
comment5.text=\ metodo\ insertarNodoRecursivo\r\n\ \ \ busca\ el\ lugar\ donde\ el\ nodo\ debe\ ser\ ingresado\ y\ lo\ ingresa\ en\ dicho\ lugar\r\n\ parametros\ de\ entrada\r\n\ \ \ toma\ como\ parametros\ un\ nodoArbol\ para\ comparar\ y\ un\ entero\ valor\ para\ ingresar\r\n\ parametros\ de\ salida\r\n\ \ \ ninguno\r\n\ respuesta\ esperada\r\n\ \ \ \ \ \ \ se\ espera\ que\ el\ metodo\ sea\ capaz\ de\ recorrer\ el\ arbol\ para\ saber\ donde\ debe\ ingresar\ el\ nodo\r\n
comment6.params=valorParam
comment6.target=void\ ingresarNodo(int)
comment6.text=\ metodo\ insertar\r\n\ \ \ recibe\ el\ metodo\ recursivo\ y\ lo\ transforma\ para\ que\ reciba\ un\ parametro\r\n\ parametros\ de\ entrada\r\n\ \ \ toma\ como\ parametros\ un\ numero\ entero\ para\ ingresar\ un\ nodo\r\n\ parametros\ de\ salida\r\n\ \ \ ninguno\r\n\ respuesta\ esperada\r\n\ \ \ \ \ \ \ se\ espera\ que\ el\ metodo\ sea\ capaz\ de\ ingresar\ un\ nodo\ con\ el\ valor\ insertado\r\n
comment7.params=nodo\ valor
comment7.target=NodoArbol\ eliminarNodo(NodoArbol,\ int)
comment7.text=\ metodo\ eliminarNodo\r\n\ \ \ el\ metodo\ recorre\ el\ arbol\ y\ elimina\ el\ nodo\ del\ valor\ ingresado\r\n\ parametros\ de\ entrada\r\n\ \ \ toma\ como\ parametros\ un\ numero\ entero\ y\ un\ nodoArbol\ para\ comparar\r\n\ parametros\ de\ salida\r\n\ \ \ retorna\ un\ nodoArbol\r\n\ respuesta\ esperada\r\n\ \ \ \ \ \ \ se\ espera\ que\ el\ metodo\ sea\ capaz\ de\ eliminar\ el\ nodo\ del\ valor\ solicitado\r\n
comment8.params=nodo
comment8.target=void\ mostrarOrden(NodoArbol)
comment8.text=\ metodo\ mostrarOrden\r\n\ \ \ recorre\ el\ arbol\ y\ lo\ imprime\r\n\ parametros\ de\ entrada\r\n\ \ \ toma\ como\ parametros\ un\ nodo\r\n\ parametros\ de\ salida\r\n\ \ \ ninguno\r\n\ respuesta\ esperada\r\n\ \ \ \ \ \ \ se\ espera\ que\ el\ metodo\ sea\ capaz\ de\ recorrer\ el\ arbol\r\n
comment9.params=nodo\ valor
comment9.target=boolean\ existenciaNodo(NodoArbol,\ int)
comment9.text=\ metodo\ existenciaNodo\r\n\ \ \ recorre\ el\ arbol\ y\ nos\ devuelve\ true\ si\ el\ nodo\ deseado\ existe\r\n\ parametros\ de\ entrada\r\n\ \ \ toma\ como\ parametros\ un\ numero\ entero\ para\ buscar\ y\ un\ nodo\ para\ comparar\r\n\ parametros\ de\ salida\r\n\ \ \ retorna\ un\ booleano\r\n\ respuesta\ esperada\r\n\ \ \ \ \ \ \ se\ espera\ que\ el\ metodo\ sea\ capaz\ de\ recorrer\ el\ arbol\ y\ retornar\ la\ existencua\ del\ nodo.\r\n
numComments=10
